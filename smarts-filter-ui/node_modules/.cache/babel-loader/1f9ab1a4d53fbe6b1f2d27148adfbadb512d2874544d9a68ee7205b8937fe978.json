{"ast":null,"code":"var _jsxFileName = \"/Users/bspanthi/Documents/SmartFilter-UI/smarts-filter-ui/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport SmartFilterLayout from \"./components/SmartFilterLayout\";\nimport SmartsFilterResult from \"./components/SmartsFilterResult\";\nimport initRDKitModule from \"@rdkit/rdkit\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// type RunMode = \"filter\" | \"analyze1mol\";\n// type AppMode = \"normal\" | \"expert\";\n\nfunction App() {\n  _s();\n  const [results, setResults] = useState([]);\n  const [smarts, setSmarts] = useState([]);\n  const [mode, setMode] = useState(\"normal\");\n  const [runmode, setRunmode] = useState(\"filter\");\n  const [tMatch, setMatch] = useState(0);\n  const [RDKit, setRDKit] = useState(null);\n  useEffect(() => {\n    const loadRDKit = async () => {\n      try {\n        const RDKitModule = await initRDKitModule({\n          locateFile: () => \"/RDKit_minimal.wasm\"\n        });\n        setRDKit(RDKitModule);\n        console.log(\"RDKit.js initialized in App\");\n      } catch (err) {\n        console.error(\"RDKit.js init failed\", err);\n      }\n    };\n    loadRDKit();\n  }, []);\n  const readFileContent = file => new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = e => {\n      var _e$target;\n      return resolve((_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.result);\n    };\n    reader.onerror = reject;\n    reader.readAsText(file);\n  });\n  const handleSubmit = async inputData => {\n    let smilesRaw = \"\";\n    let smartsRaw = \"\";\n    if (inputData.smiles.type === \"text\") {\n      smilesRaw = inputData.smiles.content;\n    } else {\n      smilesRaw = await readFileContent(inputData.smiles.content);\n    }\n    if (inputData.smarts.type === \"text\") {\n      smartsRaw = inputData.smarts.content;\n    } else {\n      smartsRaw = await readFileContent(inputData.smarts.content);\n    }\n    const lines = smilesRaw.split(/\\r?\\n/).filter(Boolean);\n    const smilesArray = [];\n    const namesArray = [];\n    for (const line of lines) {\n      const parts = line.split(new RegExp(`[\\t,${inputData.delimiter}]+`)).filter(Boolean);\n      const smile = parts[inputData.smileCol] || \"\";\n      smilesArray.push(smile);\n      namesArray.push(inputData.nameCol !== null && parts[inputData.nameCol] ? parts[inputData.nameCol] : smile);\n    }\n    const smartsArray = smartsRaw.split(/\\n+/).map(line => line.trim()).filter(Boolean).map(line => {\n      const parts = line.split(/\\s+/);\n      return {\n        smarts: parts[0],\n        name: parts[1] || `S${Math.random().toString(36).slice(2, 6)}`\n      };\n    });\n    setSmarts(smartsArray);\n    setMatch(smilesArray.length);\n    const query = new URLSearchParams();\n    query.append(\"SMILES\", smilesArray.join(\",\"));\n    query.append(\"Smile_Names\", namesArray.join(\",\"));\n    if (mode === \"normal\") {\n      if (runmode === \"filter\") {\n        const inputCanonMap = new Map();\n        const inputNameMap = new Map();\n        smilesArray.forEach((smi, idx) => {\n          try {\n            const mol = RDKit.get_mol(smi);\n            const canon = mol.get_smiles();\n            mol.delete();\n            inputCanonMap.set(canon, smi);\n            inputNameMap.set(canon, namesArray[idx]);\n          } catch {\n            console.warn(\"Invalid SMILES:\", smi);\n          }\n        });\n        const allFailures = [];\n        for (let i = 0; i < smartsArray.length; i++) {\n          const query = new URLSearchParams();\n          query.append(\"SMILES\", smilesArray.join(\",\"));\n          query.append(\"Smile_Names\", namesArray.join(\",\"));\n          query.append(\"smarts\", smartsArray[i].smarts);\n          const res = await fetch(`http://localhost:8000/api/v1/smarts_filter/get_matchfilter?${query}`);\n          const json = await res.json();\n          const failedCanon = json.failed.map(m => {\n            try {\n              const mol = RDKit.get_mol(m.smiles);\n              const canon = mol.get_smiles();\n              mol.delete();\n              return canon;\n            } catch {\n              return null;\n            }\n          }).filter(Boolean);\n          const passedCanon = json.passed.map(m => {\n            try {\n              const mol = RDKit.get_mol(m.smiles);\n              const canon = mol.get_smiles();\n              mol.delete();\n              return canon;\n            } catch {\n              return null;\n            }\n          }).filter(Boolean);\n          failedCanon.forEach(canonSmiles => {\n            allFailures.push({\n              name: inputNameMap.get(canonSmiles) || canonSmiles,\n              SMILES: inputCanonMap.get(canonSmiles) || canonSmiles,\n              Smart: smartsArray[i].name,\n              matched: true,\n              failed: true\n            });\n          });\n          passedCanon.forEach(canonSmiles => {\n            allFailures.push({\n              name: inputNameMap.get(canonSmiles) || canonSmiles,\n              SMILES: inputCanonMap.get(canonSmiles) || canonSmiles,\n              Smart: smartsArray[i].name,\n              matched: false,\n              failed: false\n            });\n          });\n        }\n        setResults(allFailures);\n      } else if (runmode === \"analyze1mol\") {\n        const inputCanonMap = new Map();\n        const inputNameMap = new Map();\n        smilesArray.forEach((smi, idx) => {\n          try {\n            const mol = RDKit.get_mol(smi);\n            const canon = mol.get_smiles();\n            mol.delete();\n            inputCanonMap.set(canon, smi);\n            inputNameMap.set(canon, namesArray[idx]);\n          } catch {\n            console.warn(\"Invalid SMILES:\", smi);\n          }\n        });\n        const allResults = [];\n        smartsArray.forEach(s => query.append(\"smarts\", s.smarts));\n        smartsArray.forEach(s => query.append(\"Smart_Names\", s.name));\n        const res = await fetch(`http://localhost:8000/api/v1/smarts_filter/get_multi_matchfilter?${query}`);\n        const json = await res.json();\n        json.passed.forEach(mol => {\n          try {\n            const molObj = RDKit.get_mol(mol.smiles);\n            const canon = molObj.get_smiles();\n            molObj.delete();\n            allResults.push({\n              name: mol.name || inputNameMap.get(canon) || canon,\n              SMILES: mol.smiles || inputCanonMap.get(canon) || canon,\n              matched: false,\n              failed: false\n            });\n          } catch {\n            // silently skip bad mols\n          }\n        });\n        json.failed.forEach(mol => {\n          try {\n            const molObj = RDKit.get_mol(mol.smiles);\n            const canon = molObj.get_smiles();\n            molObj.delete();\n            allResults.push({\n              name: mol.name || inputNameMap.get(canon) || canon,\n              SMILES: mol.smiles || inputCanonMap.get(canon) || canon,\n              matched: true,\n              failed: true\n            });\n          } catch {}\n        });\n        setResults(allResults);\n      }\n    }\n  };\n\n  // return (\n  //   <div className=\"p-4 space-y-4\">\n  //     <div className=\"flex gap-4 items-center\">\n  //       <label className=\"font-semibold\">Mode:</label>\n  //       <select\n  //         value={mode}\n  //         onChange={(e) => setMode(e.target.value as AppMode)}\n  //         className=\"border p-1\"\n  //       >\n  //         <option value=\"normal\">Normal</option>\n  //         <option value=\"expert\">Expert</option>\n  //       </select>\n\n  //       <label className=\"font-semibold\">Run Mode:</label>\n  //       <select\n  //         value={runmode}\n  //         onChange={(e) => setRunmode(e.target.value as RunMode)}\n  //         className=\"border p-1\"\n  //       >\n  //         <option value=\"filter\">Filter</option>\n  //         <option value=\"analyze1mol\">Analyze One Molecule</option>\n  //       </select>\n  //     </div>\n\n  //     <InputData onSubmit={handleSubmit} />\n\n  //     <SmartsFilterResult\n  //       matchCounts={results}\n  //       mode={runmode}\n  //       totalMatched={tMatch}\n  //     />\n  //   </div>\n  // );\n  return /*#__PURE__*/_jsxDEV(SmartFilterLayout, {\n    mode: mode,\n    setMode: setMode,\n    runmode: runmode,\n    setRunmode: setRunmode,\n    onSubmit: handleSubmit,\n    children: /*#__PURE__*/_jsxDEV(SmartsFilterResult, {\n      matchCounts: results,\n      mode: runmode,\n      totalMatched: tMatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 273,\n    columnNumber: 7\n  }, this);\n}\n_s(App, \"SnKbc7ZMvtWLF3R0Wt1HcoPBbRQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","SmartFilterLayout","SmartsFilterResult","initRDKitModule","jsxDEV","_jsxDEV","App","_s","results","setResults","smarts","setSmarts","mode","setMode","runmode","setRunmode","tMatch","setMatch","RDKit","setRDKit","loadRDKit","RDKitModule","locateFile","console","log","err","error","readFileContent","file","Promise","resolve","reject","reader","FileReader","onload","e","_e$target","target","result","onerror","readAsText","handleSubmit","inputData","smilesRaw","smartsRaw","smiles","type","content","lines","split","filter","Boolean","smilesArray","namesArray","line","parts","RegExp","delimiter","smile","smileCol","push","nameCol","smartsArray","map","trim","name","Math","random","toString","slice","length","query","URLSearchParams","append","join","inputCanonMap","Map","inputNameMap","forEach","smi","idx","mol","get_mol","canon","get_smiles","delete","set","warn","allFailures","i","res","fetch","json","failedCanon","failed","m","passedCanon","passed","canonSmiles","get","SMILES","Smart","matched","allResults","s","molObj","onSubmit","children","matchCounts","totalMatched","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/bspanthi/Documents/SmartFilter-UI/smarts-filter-ui/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport InputData from \"./components/InputData\";\nimport SmartFilterLayout from \"./components/SmartFilterLayout\";\nimport SmartsFilterResult from \"./components/SmartsFilterResult\";\nimport initRDKitModule from \"@rdkit/rdkit\"; \n\nexport type MatchResult = {\n  name: string;\n  SMILES: string;\n  Smart?: string;\n  n_matches?: number;\n  matched?: boolean;\n  matches?: boolean[];\n  failed?: boolean;\n};\n\n// type RunMode = \"filter\" | \"analyze1mol\";\n// type AppMode = \"normal\" | \"expert\";\n\nfunction App() {\n  const [results, setResults] = useState<MatchResult[]>([]);\n  const [smarts, setSmarts] = useState<{ smarts: string; name: string }[]>([]);\n  const [mode, setMode] = useState<AppMode>(\"normal\");\n  const [runmode, setRunmode] = useState<RunMode>(\"filter\");\n  const [tMatch, setMatch] = useState<number>(0);\n  const [RDKit, setRDKit] = useState<any>(null);\n\n  useEffect(() => {\n    const loadRDKit = async () => {\n      try {\n        const RDKitModule = await initRDKitModule({\n          locateFile: () => \"/RDKit_minimal.wasm\",\n        });\n        setRDKit(RDKitModule);\n        console.log(\"RDKit.js initialized in App\");\n      } catch (err) {\n        console.error(\"RDKit.js init failed\", err);\n      }\n    };\n    loadRDKit();\n  }, []);\n\n  const readFileContent = (file: File): Promise<string> =>\n    new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = (e) => resolve(e.target?.result as string);\n      reader.onerror = reject;\n      reader.readAsText(file);\n    });\n\n  const handleSubmit = async (inputData: any) => {\n    let smilesRaw = \"\";\n    let smartsRaw = \"\";\n\n    if (inputData.smiles.type === \"text\") {\n      smilesRaw = inputData.smiles.content;\n    } else {\n      smilesRaw = await readFileContent(inputData.smiles.content);\n    }\n\n    if (inputData.smarts.type === \"text\") {\n      smartsRaw = inputData.smarts.content;\n    } else {\n      smartsRaw = await readFileContent(inputData.smarts.content);\n    }\n\n    const lines = smilesRaw.split(/\\r?\\n/).filter(Boolean);\n    const smilesArray: string[] = [];\n    const namesArray: string[] = [];\n\n    for (const line of lines) {\n      const parts = line.split(new RegExp(`[\\t,${inputData.delimiter}]+`)).filter(Boolean);\n      const smile = parts[inputData.smileCol] || \"\";\n      smilesArray.push(smile);\n      namesArray.push(inputData.nameCol !== null && parts[inputData.nameCol] ? parts[inputData.nameCol] : smile);\n    }\n    \n    const smartsArray = smartsRaw\n        .split(/\\n+/)\n        .map((line) => line.trim())\n        .filter(Boolean)\n        .map((line) => {\n          const parts = line.split(/\\s+/); \n          return {\n            smarts: parts[0],\n            name: parts[1] || `S${Math.random().toString(36).slice(2, 6)}`, \n          };\n        });\n    setSmarts(smartsArray);\n    setMatch(smilesArray.length);\n\n    const query = new URLSearchParams();\n    query.append(\"SMILES\", smilesArray.join(\",\"));\n    query.append(\"Smile_Names\", namesArray.join(\",\"));\n\n    if (mode === \"normal\") {\n      if (runmode === \"filter\") {\n        const inputCanonMap = new Map<string, string>();\n        const inputNameMap = new Map<string, string>();\n        smilesArray.forEach((smi, idx) => {\n          try {\n            const mol = RDKit.get_mol(smi);\n            const canon = mol.get_smiles();\n            mol.delete();\n            inputCanonMap.set(canon, smi);\n            inputNameMap.set(canon, namesArray[idx]);\n          } catch {\n            console.warn(\"Invalid SMILES:\", smi);\n          }\n        });\n\n        const allFailures: MatchResult[] = [];\n\n        for (let i = 0; i < smartsArray.length; i++) {\n          const query = new URLSearchParams();\n          query.append(\"SMILES\", smilesArray.join(\",\"));\n          query.append(\"Smile_Names\", namesArray.join(\",\"));\n          query.append(\"smarts\", smartsArray[i].smarts);\n\n          const res = await fetch(\n            `http://localhost:8000/api/v1/smarts_filter/get_matchfilter?${query}`\n          );\n          const json = await res.json();\n          const failedCanon = json.failed\n            .map((m: any) => {\n              try {\n                const mol = RDKit.get_mol(m.smiles);\n                const canon = mol.get_smiles();\n                mol.delete();\n                return canon;\n              } catch {\n                return null;\n              }\n            })\n            .filter(Boolean);\n\n          const passedCanon = json.passed\n            .map((m: any) => {\n              try {\n                const mol = RDKit.get_mol(m.smiles);\n                const canon = mol.get_smiles();\n                mol.delete();\n                return canon;\n              } catch {\n                return null;\n              }\n            })\n            .filter(Boolean);\n\n          failedCanon.forEach((canonSmiles: string) => {\n            allFailures.push({\n              name: inputNameMap.get(canonSmiles) || canonSmiles,\n              SMILES: inputCanonMap.get(canonSmiles) || canonSmiles,\n              Smart: smartsArray[i].name,\n              matched: true,\n              failed: true,\n            });\n          });\n\n          passedCanon.forEach((canonSmiles: string) => {\n            allFailures.push({\n              name: inputNameMap.get(canonSmiles) || canonSmiles,\n              SMILES: inputCanonMap.get(canonSmiles) || canonSmiles,\n              Smart: smartsArray[i].name,\n              matched: false,\n              failed: false,\n            });\n          });\n\n        }\n        \n        setResults(allFailures);\n      }\n    else if (runmode === \"analyze1mol\") {\n      const inputCanonMap = new Map<string, string>();\n      const inputNameMap = new Map<string, string>();\n      smilesArray.forEach((smi, idx) => {\n        try {\n          const mol = RDKit.get_mol(smi);\n          const canon = mol.get_smiles();\n          mol.delete();\n          inputCanonMap.set(canon, smi);\n          inputNameMap.set(canon, namesArray[idx]);\n        } catch {\n          console.warn(\"Invalid SMILES:\", smi);\n        }\n      });\n\n      const allResults: MatchResult[] = [];\n\n      smartsArray.forEach(s => query.append(\"smarts\", s.smarts));\n      smartsArray.forEach(s => query.append(\"Smart_Names\", s.name));\n\n      const res = await fetch(\n        `http://localhost:8000/api/v1/smarts_filter/get_multi_matchfilter?${query}`\n      );\n      const json = await res.json();\n\n      json.passed.forEach((mol: any) => {\n        try {\n          const molObj = RDKit.get_mol(mol.smiles);\n          const canon = molObj.get_smiles();\n          molObj.delete();\n\n          allResults.push({\n            name: mol.name || inputNameMap.get(canon) || canon,\n            SMILES: mol.smiles || inputCanonMap.get(canon) || canon,\n            matched: false,\n            failed: false,\n          });\n        } catch {\n          // silently skip bad mols\n        }\n      });\n\n      json.failed.forEach((mol: any) => {\n        try {\n          const molObj = RDKit.get_mol(mol.smiles);\n          const canon = molObj.get_smiles();\n          molObj.delete();\n\n          allResults.push({\n            name: mol.name || inputNameMap.get(canon) || canon,\n            SMILES: mol.smiles || inputCanonMap.get(canon) || canon,\n            matched: true, \n            failed: true,\n          });\n        } catch {\n          \n        }\n      });\n\n      setResults(allResults);\n    }\n\n    }\n  };\n\n  // return (\n  //   <div className=\"p-4 space-y-4\">\n  //     <div className=\"flex gap-4 items-center\">\n  //       <label className=\"font-semibold\">Mode:</label>\n  //       <select\n  //         value={mode}\n  //         onChange={(e) => setMode(e.target.value as AppMode)}\n  //         className=\"border p-1\"\n  //       >\n  //         <option value=\"normal\">Normal</option>\n  //         <option value=\"expert\">Expert</option>\n  //       </select>\n\n  //       <label className=\"font-semibold\">Run Mode:</label>\n  //       <select\n  //         value={runmode}\n  //         onChange={(e) => setRunmode(e.target.value as RunMode)}\n  //         className=\"border p-1\"\n  //       >\n  //         <option value=\"filter\">Filter</option>\n  //         <option value=\"analyze1mol\">Analyze One Molecule</option>\n  //       </select>\n  //     </div>\n\n  //     <InputData onSubmit={handleSubmit} />\n\n  //     <SmartsFilterResult\n  //       matchCounts={results}\n  //       mode={runmode}\n  //       totalMatched={tMatch}\n  //     />\n  //   </div>\n  // );\n    return (\n      <SmartFilterLayout\n        mode={mode}\n        setMode={setMode}\n        runmode={runmode}\n        setRunmode={setRunmode}\n        onSubmit={handleSubmit}\n      >\n        <SmartsFilterResult\n          matchCounts={results}\n          mode={runmode}\n          totalMatched={tMatch}\n        />\n      </SmartFilterLayout>\n  );\n}\nexport type RunMode = \"filter\" | \"analyze1mol\";\nexport type AppMode = \"normal\" | \"expert\";\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}